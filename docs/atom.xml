<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xgod Blog</title>
  
  
  <link href="https://xxxgod.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxxgod.github.io/"/>
  <updated>2025-04-21T08:55:58.324Z</updated>
  <id>https://xxxgod.github.io/</id>
  
  <author>
    <name>xgod</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot自动配置</title>
    <link href="https://xxxgod.github.io/2023/04/21/Springboot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://xxxgod.github.io/2023/04/21/Springboot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2023-04-21T08:23:26.000Z</published>
    <updated>2025-04-21T08:55:58.324Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-入口注解-SpringBootApplication"><a href="#1-入口注解-SpringBootApplication" class="headerlink" title="1. 入口注解 @SpringBootApplication"></a>1. 入口注解 <code>@SpringBootApplication</code></h4><p><code>@SpringBootApplication</code> 是一个组合注解，它包含了 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 三个重要注解。其中，<code>@EnableAutoConfiguration</code> 是开启自动配置的关键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-EnableAutoConfiguration-注解"><a href="#2-EnableAutoConfiguration-注解" class="headerlink" title="2. @EnableAutoConfiguration 注解"></a>2. <code>@EnableAutoConfiguration</code> 注解</h4><p>该注解通过 <code>@Import</code> 导入 <code>AutoConfigurationImportSelector</code> 类，这个类负责加载自动配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-AutoConfigurationImportSelector-类"><a href="#3-AutoConfigurationImportSelector-类" class="headerlink" title="3. AutoConfigurationImportSelector 类"></a>3. <code>AutoConfigurationImportSelector</code> 类</h4><p><code>AutoConfigurationImportSelector</code> 类实现了 <code>DeferredImportSelector</code> 接口，在 <code>selectImports</code> 方法中完成自动配置类的加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">    <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> getAttributes(annotationMetadata);</span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-获取候选自动配置类"><a href="#4-获取候选自动配置类" class="headerlink" title="4. 获取候选自动配置类"></a>4. 获取候选自动配置类</h4><p><code>getCandidateConfigurations</code> 方法从 <code>META-INF/spring.factories</code> 文件中读取所有候选的自动配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">            getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class="line">            + <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-过滤自动配置类"><a href="#5-过滤自动配置类" class="headerlink" title="5. 过滤自动配置类"></a>5. 过滤自动配置类</h4><p>在获取候选自动配置类后，会进行一系列的过滤操作，例如根据 <code>@Conditional</code> 注解进行条件判断，只有满足条件的自动配置类才会被加载。</p><h3 id="步骤总结"><a href="#步骤总结" class="headerlink" title="步骤总结"></a>步骤总结</h3><ol><li><strong>启动注解触发</strong>：<code>@SpringBootApplication</code> 注解开启自动配置功能，其中 <code>@EnableAutoConfiguration</code> 注解导入 <code>AutoConfigurationImportSelector</code> 类。</li><li><strong>加载候选配置类</strong>：<code>AutoConfigurationImportSelector</code> 类从 <code>META-INF/spring.factories</code> 文件中读取所有候选的自动配置类。</li><li><strong>排除不需要的配置类</strong>：根据 <code>@EnableAutoConfiguration</code> 注解的 <code>exclude</code> 和 <code>excludeName</code> 属性，排除不需要的自动配置类。</li><li><strong>条件过滤</strong>：对候选配置类进行条件过滤，只有满足 <code>@Conditional</code> 注解条件的配置类才会被加载。</li><li><strong>加载自动配置类</strong>：将经过过滤后的自动配置类加载到 Spring 容器中。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-入口注解-SpringBootApplication&quot;&gt;&lt;a href=&quot;#1-入口注解-SpringBootApplication&quot; class=&quot;headerlink&quot; title=&quot;1. 入口注解 @SpringBootApplication&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="springboot" scheme="https://xxxgod.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务架构演进</title>
    <link href="https://xxxgod.github.io/2022/08/21/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/"/>
    <id>https://xxxgod.github.io/2022/08/21/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</id>
    <published>2022-08-21T15:00:59.000Z</published>
    <updated>2025-04-21T08:53:57.897Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud是基于Spring Boot的，因此还在使用SpringMVC的同学要先了解Spring Boot。先上一段官话，Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发框架。</p><p>　　Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><p><img src="/.%5Cimg%5Cblog%5C273387-20190317154408417-983057661.png" alt="img"></p><h2 id="Spring-Cloud全家桶"><a href="#Spring-Cloud全家桶" class="headerlink" title="Spring Cloud全家桶"></a>Spring Cloud全家桶</h2><p>　　上面的图是Spring Cloud的全家桶，包罗万象，犹如水电，涉及到开发的方方页面。</p><p>　　Spring Cloud从设计之初就考虑了绝大多数互联网公司架构演化所需的功能，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等。</p><h2 id="首先是核心服务治理的组件（服务注册与发现）Spring-Cloud-Eureka"><a href="#首先是核心服务治理的组件（服务注册与发现）Spring-Cloud-Eureka" class="headerlink" title="首先是核心服务治理的组件（服务注册与发现）Spring Cloud Eureka"></a>首先是核心服务治理的组件（服务注册与发现）Spring Cloud Eureka</h2><p>　　Eureka是Netflix开源的一款提供服务注册和发现的产品，Eureka就是一个服务中心，将所有的可以提供的服务都注册到它这里来管理，其它各调用者需要的时候去注册中心获取，然后再进行调用，避免了服务之间的直接调用，方便后续的水平扩展、故障转移等。如下图：<br><img src="/.%5Cimg%5Cblog%5C273387-20190325152207720-576908114.png" alt="img"></p><p>　　当然服务中心这么重要的组件一但挂掉将会影响全部服务，因此需要搭建Eureka集群来保持高可用性，生产中建议最少两台。随着系统的流量不断增加，需要根据情况来扩展某个服务，Eureka内部已经提供均衡负载的功能，只需要增加相应的服务端实例既可。那么在系统的运行期间某个实例挂了怎么办？Eureka内容有一个心跳检测机制，如果某个实例在规定的时间内没有进行通讯则会自动被剔除掉，避免了某个实例挂掉而影响服务。<br>　　因此使用了Eureka就自动具有了注册中心、负载均衡、故障转移的功能。</p><p>　　当然还有另外一个实现组件Spring Cloud Consul，这里不做多介绍。</p><p>　　随着微服务不断的增多，每个微服务都有自己对应的配置文件。在研发过程中有测试环境、UAT环境、生产环境，因此每个微服务又对应至少三个不同环境的配置文件。这么多的配置文件，如果需要修改某个公共服务的配置信息，如：缓存、数据库等，难免会产生混乱，这个时候就需要引入Spring Cloud另外一个组件：Spring Cloud Config。</p><h2 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h2><p>　　Spring Cloud Config是一个解决分布式系统的配置管理方案。它包含了Client和Server两个部分，其实就是Server端将所有的配置文件服务化，需要配置文件的服务实例去Config Server获取对应的数据。将所有的配置文件统一整理，避免了配置文件碎片化。</p><p>　　如果服务运行期间改变配置文件，服务是不会得到最新的配置信息，需要解决这个问题就需要引入Refresh。可以在服务的运行期间重新加载配置文件，当所有的配置文件都存储在配置中心的时候，配置中心就成为了一个非常重要的组件。如果配置中心出现问题将会导致灾难性的后果，因此在生产中建议对配置中心做集群，来支持配置中心高可用性。</p><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><p>　　在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。</p><p>　　如下图所示：A作为服务提供者，B为A的服务消费者，C和D是B的服务消费者。A不可用引起了B的不可用，并将不可用像滚雪球一样放大到C和D时，雪崩效应就形成了。</p><p><img src="/.%5Cimg%5Cblog%5C273387-20190317155856648-1759056624.png" alt="img"> </p><p>　　在这种情况下就需要整个服务机构具有故障隔离的功能，避免某一个服务挂掉影响全局。在Spring Cloud 中Hystrix组件就扮演这个角色。</p><p>　　Hystrix会在某个服务连续调用N次不响应的情况下，立即通知调用端调用失败，避免调用端持续等待而影响了整体服务。Hystrix间隔时间会再次检查此服务，如果服务恢复将继续提供服务。</p><h2 id="Hystrix-Dashboard和Turbine"><a href="#Hystrix-Dashboard和Turbine" class="headerlink" title="Hystrix Dashboard和Turbine"></a>Hystrix Dashboard和Turbine</h2><p>　　当熔断发生的时候需要迅速的响应来解决问题，避免故障进一步扩散，那么对熔断的监控就变得非常重要。熔断的监控现在有两款工具：Hystrix-dashboard和Turbine。</p><p>　　Hystrix-dashboard是一款针对Hystrix进行实时监控的工具，通过Hystrix Dashboard我们可以直观地看到各Hystrix Command的请求响应时间, 请求成功率等数据。但是只使用Hystrix Dashboard的话, 你只能看到单个应用内的服务信息, 这明显不够. 我们需要一个工具能让我们汇总系统内多个服务的数据并显示到Hystrix Dashboard上, 这个工具就是Turbine. 监控的效果图如下：</p><p><img src="/.%5Cimg%5Cblog%5C273387-20190317155935817-1010768229.png" alt="img"></p><h2 id="Spring-Cloud-Bus消息总线"><a href="#Spring-Cloud-Bus消息总线" class="headerlink" title="Spring Cloud Bus消息总线"></a>Spring Cloud Bus消息总线</h2><p>　　Refresh方案虽然可以解决单个微服务运行期间重载配置信息的问题，但是在真正的实践生产中，可能会有N多的服务需要更新配置，如果每次依靠手动Refresh将是一个巨大的工作量，这时候Spring Cloud提出了另外一个解决方案：Spring Cloud Bus<br>　　Spring Cloud Bus通过轻量消息代理连接各个分布的节点。这会用在广播状态的变化（例如配置变化）或者其它的消息指令中。Spring Cloud Bus的一个核心思想是通过分布式的启动器对Spring Boot应用进行扩展，也可以用来建立一个或多个应用之间的通信频道。目前唯一实现的方式是用AMQP消息代理作为通道。<br>　　Spring Cloud Bus是轻量级的通讯组件，也可以用在其它类似的场景中。有了Spring Cloud Bus之后，当我们改变配置文件提交到版本库中时，会自动的触发对应实例的Refresh，具体的工作流程如下：</p><p><img src="/.%5Cimg%5Cblog%5C273387-20190317160014440-915992297.png" alt="img"></p><h2 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h2><p>　　在微服务架构模式下，后端服务的实例数一般是动态的，对于客户端而言很难发现动态改变的服务实例的访问地址信息。因此在基于微服务的项目中为了简化前端的调用逻辑，通常会引入API Gateway作为轻量级网关，同时API Gateway中也会实现相关的认证逻辑从而简化内部服务之间相互调用的复杂度。 </p><p><img src="/.%5Cimg%5Cblog%5C273387-20190317160048258-1475641468.png" alt="img"></p><p>　　Spring Cloud体系中支持API Gateway落地的技术就是Zuul。Spring Cloud Zuul路由是微服务架构中不可或缺的一部分，提供动态路由，监控，弹性，安全等的边缘服务。Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。它的具体作用就是服务转发，接收并转发所有内外部的客户端调用。使用Zuul可以作为资源的统一访问入口，同时也可以在网关做一些权限校验等类似的功能。</p><h2 id="链路跟踪"><a href="#链路跟踪" class="headerlink" title="链路跟踪"></a>链路跟踪</h2><p>　　随着服务的越来越多，对调用链的分析会越来越复杂，如服务之间的调用关系、某个请求对应的调用链、调用之间消费的时间等，对这些信息进行监控就成为一个问题。在实际的使用中我们需要监控服务和服务之间通讯的各项指标，这些数据将是我们改进系统架构的主要依据。因此分布式的链路跟踪就变的非常重要，Spring Cloud也给出了具体的解决方案：Spring Cloud Sleuth和Zipkin<br><img src="/.%5Cimg%5Cblog%5C273387-20190317160535697-1520907017.png" alt="img"></p><p>　　Spring Cloud Sleuth为服务之间调用提供链路追踪。通过Sleuth可以很清楚的了解到一个服务请求经过了哪些服务，每个服务处理花费了多长时间。从而让我们可以很方便的理清各微服务间的调用关系。分布式链路跟踪需要Sleuth+Zipkin结合来实现，当然实现链路追踪的还有三方开源方案，如果zipkin实现的功能非常简单，图形化能力也不强，所以可以试试其它的方案，如pinpoint较成熟的框架等。</p><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>　　声明式远程调度组件。</p><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><p>　　负载均衡组件</p><h2 id="Spring-Cloud-Data-Flow"><a href="#Spring-Cloud-Data-Flow" class="headerlink" title="Spring Cloud Data Flow"></a>Spring Cloud Data Flow</h2><p>　　大数据操作组件，它是Spring XD的替代品，也是一个混合计算模型，可以通过命令行的方式操作数据流</p><h2 id="Spring-Cloud-Task"><a href="#Spring-Cloud-Task" class="headerlink" title="Spring Cloud Task"></a>Spring Cloud Task</h2><p>　　组件基于Spring Tsak，提供任务调度和任务管理的功能</p><p>　　以上只介绍经常用到非常重要的内容，一般的技术栈为 SpringCloud +GitLab+Jenkins进行普通服务的开发持续集成部署CI，后面可升级用SpingCloud +GitLab+Jenkins+Docker容器化布署，进一步升级到用 SpingCloud +GitLab+Jenkins+Docker+k8s自动化容器编排内容，这里的难度等级就完全不一样了，而且每一个组件都涉及到很多内容，传统业务如何进行微服务的拆分下次再进行讨论。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring Cloud是基于Spring Boot的，因此还在使用SpringMVC的同学要先了解Spring Boot。先上一段官话，Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路</summary>
      
    
    
    
    
    <category term="springcloud" scheme="https://xxxgod.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>java逆向安全之反编译jar和jar加密</title>
    <link href="https://xxxgod.github.io/2022/06/09/java%E9%80%86%E5%90%91%E5%AE%89%E5%85%A8%E4%B9%8B%E5%8F%8D%E7%BC%96%E8%AF%91jar%E5%92%8Cjar%E5%8A%A0%E5%AF%86/"/>
    <id>https://xxxgod.github.io/2022/06/09/java%E9%80%86%E5%90%91%E5%AE%89%E5%85%A8%E4%B9%8B%E5%8F%8D%E7%BC%96%E8%AF%91jar%E5%92%8Cjar%E5%8A%A0%E5%AF%86/</id>
    <published>2022-06-09T07:04:31.000Z</published>
    <updated>2025-04-01T14:19:53.891Z</updated>
    
    <content type="html"><![CDATA[<p>反编译class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo %1</span><br><span class="line">set clasPath=%1</span><br><span class="line">for /f &quot;tokens=4* delims=\&quot; %%a in (&quot;%clasPath%&quot;) do (</span><br><span class="line">    ::输出第一个分段(令牌)</span><br><span class="line">    echo %%a</span><br><span class="line">java -jar .\tools\cfr-0.152.jar %1</span><br><span class="line">java -jar .\tools\cfr-0.152.jar %1 &gt; %%a.java</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::if &quot;%1&quot;==&quot;&quot; ( echo Please enter [class file name] or [jar package path and outputdir path] ) ^</span><br><span class="line">::else if &quot;%2&quot;==&quot;&quot; (java -jar .\tools\cfr-0.152.jar %1) ^</span><br><span class="line">::else ( java -jar .\tools\cfr-0.152.jar %1 --outputdir %2 ) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>反编译Jar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">java -jar .\tools\cfr-0.152.jar %1 --outputdir ./source_code</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>加密jar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set /p password=输入密码：</span><br><span class="line">java -cp .\tools\xjarDemo-1.0-SNAPSHOT.jar XjarDemo %password% %1 .\encrypted.jar</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>运行加密jar-加载密码配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">java -jar %1 --xjar.keyfile=.\config\xjar.key      </span><br><span class="line">::&gt; nohup.out 2&gt;&amp;1 &amp;     </span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>生成密码文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem 将 tmp.txt 文件内容存入 value 变量</span><br><span class="line">rem set /p value=&lt;./password.key</span><br><span class="line">rem echo %value% &gt; xjar.key</span><br><span class="line">copy /y password.key xjar.key</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;反编译class&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/</summary>
      
    
    
    
    <category term="java" scheme="https://xxxgod.github.io/categories/java/"/>
    
    
    <category term="jar" scheme="https://xxxgod.github.io/tags/jar/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码解析</title>
    <link href="https://xxxgod.github.io/2021/08/21/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://xxxgod.github.io/2021/08/21/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2021-08-21T14:46:40.000Z</published>
    <updated>2025-04-01T06:12:36.463Z</updated>
    
    <content type="html"><![CDATA[<p>一.IOC源码深度剖析<br>1.一般第一步都是加载xml文件，创建一个ApplicationContext容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);</span><br><span class="line">    TestBean testBean = (TestBean) applicationContext.getBean(&quot;testBean&quot;);</span><br><span class="line">    testBean.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.进入 new ClassPathXmlApplicationContext(“classpath:applicationContext.xml”)这个构造方法；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(</span><br><span class="line">String[] configLocations, boolean refresh, @Nullable ApplicationContext parent)</span><br><span class="line">throws BeansException &#123;</span><br><span class="line">super(parent);</span><br><span class="line">    //根据文件路径，处理配置文件</span><br><span class="line">setConfigLocations(configLocations);</span><br><span class="line">if (refresh) &#123;</span><br><span class="line">        //核心方法</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.进入核心方法refresh的源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">   // 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span><br><span class="line">   synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line"> </span><br><span class="line">      // 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span><br><span class="line">      prepareRefresh();</span><br><span class="line"> </span><br><span class="line">      // 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span><br><span class="line">      // 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span><br><span class="line">      // 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"> </span><br><span class="line">      // 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span><br><span class="line">      // 这块待会会展开说</span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"> </span><br><span class="line">      try &#123;</span><br><span class="line">         // 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span><br><span class="line">         // 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span><br><span class="line"> </span><br><span class="line">         // 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span><br><span class="line">         // 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line">         // 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 回调方法</span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);          </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">         // 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span><br><span class="line">         // 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span><br><span class="line">         // 两个方法分别在 Bean 初始化之前和初始化之后得到执行。这里仅仅是注册，之后会看到回调这两方法的时机</span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"> </span><br><span class="line">         // 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span><br><span class="line">         initMessageSource();</span><br><span class="line"> </span><br><span class="line">         // 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"> </span><br><span class="line">         // 从方法名就可以知道，典型的模板方法(钩子方法)，不展开说</span><br><span class="line">         // 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span><br><span class="line">         onRefresh();</span><br><span class="line"> </span><br><span class="line">         // 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span><br><span class="line">         registerListeners();</span><br><span class="line"> </span><br><span class="line">         // 重点，重点，重点</span><br><span class="line">         // 初始化所有的 singleton beans</span><br><span class="line">         //（lazy-init 的除外）</span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"> </span><br><span class="line">         // 最后，广播事件，ApplicationContext 初始化完成，不展开</span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      catch (BeansException ex) &#123;</span><br><span class="line">         if (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class="line">                  &quot;cancelling refresh attempt: &quot; + ex);</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         // Destroy already created singletons to avoid dangling resources.</span><br><span class="line">         // 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span><br><span class="line">         destroyBeans();</span><br><span class="line"> </span><br><span class="line">         // Reset &#x27;active&#x27; flag.</span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"> </span><br><span class="line">         // 把异常往外抛</span><br><span class="line">         throw ex;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      finally &#123;</span><br><span class="line">         // Reset common introspection caches in Spring&#x27;s core, since we</span><br><span class="line">         // might not ever need metadata for singleton beans anymore...</span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）【1.准备刷新 】prepareRefresh();<br>        主要是一些准备工作设置其启动日期和活动标志以及执行一些属性的初始化。（不是很重要的方法）</p><p>（2）【2.初始化 BeanFactory 】obtainFreshBeanFactory()；（重点方法）</p><pre><code>    &lt;1&gt;如果有旧的BeanFactory就删除并创建新的BeanFactory    &lt;2&gt;解析所有的Spring配置文件，将配置文件中定义的bean封装成BeanDefinition，加载到BeanFactory中（这里只注册，不会进行Bean的实例化）</code></pre><p>（3）【3.bean工厂前置操作】prepareBeanFactory(beanFactory);</p><pre><code>    配置 beanFactory 的标准上下文特征，例如上下文的 ClassLoader、后置处理器等。</code></pre><p>（4）【4.bean工厂后置操作】postProcessBeanFactory(beanFactory);</p><pre><code>    空方法，如果子类需要，自己去实现 </code></pre><p>（5）【5.调用bean工厂后置处理器】invokeBeanFactoryPostProcessors(beanFactory);</p><pre><code>    实例化和调用所有BeanFactoryPostProcessor，完成类的扫描、解析和注册    BeanFactoryPostProcessor 接口是 Spring 初始化 BeanFactory 时对外暴露的扩展点，Spring IoC 容器允许 BeanFactoryPostProcessor 在容器实例化任何 bean 之前读取 bean 的定义，并可以修改它。</code></pre><p>（6）【6.注册bean后置处理器】registerBeanPostProcessors(beanFactory);</p><pre><code>    将所有实现了 BeanPostProcessor 接口的类注册到 BeanFactory 中。</code></pre><p>（7）【7.初始化消息源】initMessageSource();</p><pre><code>    初始化MessageSource组件（做国际化功能；消息绑定，消息解析）</code></pre><p>（8）【8.初始化事件广播器】initApplicationEventMulticaster();</p><pre><code>    初始化应用的事件广播器 ApplicationEventMulticaster。</code></pre><p>（9）【9.刷新:拓展方法】onRefresh();</p><pre><code>    空方法，模板设计模式;子类重写该方法并在容器刷新的时候自定义逻辑；    例：springBoot在onRefresh() 完成内置Tomcat的创建及启动</code></pre><p>（10）【10.注册监听器】registerListeners();</p><pre><code>    向事件分发器注册硬编码设置的applicationListener，向事件分发器注册一个IOC中的事件监听器（并不实例化）</code></pre><p>（11）【11.实例化所有非懒加载的单例bean】finishBeanFactoryInitialization(beanFactory);</p><pre><code>    是整个Spring IoC核心中的核心</code></pre><p>（12）【12.结束refresh操作】finishRefresh();</p><pre><code>    发布事件，ApplicationContext 初始化完成</code></pre><p>4.核心方法源码解析<br>【2.初始化 BeanFactory 】obtainFreshBeanFactory()；</p><pre><code>    这一步上面简单介绍过了，作用是把配置文件解析成一个个BeanBeanDefinition，并且注册到BeanFactory中，点进去源码：</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class="line">refreshBeanFactory();</span><br><span class="line">ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">if (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory);</span><br><span class="line">&#125;</span><br><span class="line">return beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">        我们进入refreshBeanFactory()方法</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class="line">    //如果存在旧的BeanFactory就删除</span><br><span class="line">if (hasBeanFactory()) &#123;</span><br><span class="line">destroyBeans();</span><br><span class="line">closeBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">        //创建新的BeanFactory</span><br><span class="line">DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">        //序列化</span><br><span class="line">beanFactory.setSerializationId(getId());</span><br><span class="line">        //是否允许 Bean 覆盖、是否允许循环引用</span><br><span class="line">customizeBeanFactory(beanFactory);</span><br><span class="line">        //根据配置，加载各个Bean，然后放到 BeanFactory 中</span><br><span class="line">loadBeanDefinitions(beanFactory);</span><br><span class="line">synchronized (this.beanFactoryMonitor) &#123;</span><br><span class="line">this.beanFactory = beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch (IOException ex) &#123;</span><br><span class="line">throw new ApplicationContextException(&quot;I/O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        这个方法的作用是关闭旧的 BeanFactory (如果有)，创建新的 BeanFactory，加载 Bean 定义、注册 Bean 等。</span><br></pre></td></tr></table></figure><p>【11.实例化所有非懒加载的单例bean】finishBeanFactoryInitialization(beanFactory);</p><p>在这个方法中，我们主要做了以下操作：<br>（1）将之前解析的 BeanDefinition 进一步处理，将有父 BeanDefinition 的进行合并，获得MergedBeanDefinition<br>（2）尝试从缓存获取 bean 实例<br>（3）处理特殊的 bean —— FactoryBean 的创建<br>（4）创建 bean 实例<br>（5）循环引用的处理[spring的三级缓存就是在这一步，后面详述]<br>（6）bean 实例属性填充<br>（7）bean 实例的初始化<br>（8）BeanPostProcessor 的各种扩展应用<br>这个方法解析的结束，也标志着Spring IoC重要内容基本都已经解析完毕</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line">        finishBeanFactoryInitialization(beanFactory)点进去看源码</span><br><span class="line"></span><br><span class="line">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">// 5.实例化所有剩余（非懒加载）单例对象</span><br><span class="line">beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br><span class="line">        preInstantiateSingletons();点进去看源码</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void preInstantiateSingletons() throws BeansException &#123;</span><br><span class="line">List&lt;String&gt; beanNames = new ArrayList&lt;&gt;(this.beanDefinitionNames);</span><br><span class="line">for (String beanName : beanNames) &#123;</span><br><span class="line">RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">if (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">            //判断beanName对应的bean是否为FactoryBean</span><br><span class="line">if (isFactoryBean(beanName)) &#123;</span><br><span class="line">Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">if (bean instanceof FactoryBean) &#123;</span><br><span class="line">final FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line">boolean isEagerInit;</span><br><span class="line">if (System.getSecurityManager() != null &amp;&amp; factory instanceof SmartFactoryBean) &#123;</span><br><span class="line">isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;)</span><br><span class="line">((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class="line">getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">isEagerInit = (factory instanceof SmartFactoryBean &amp;&amp;</span><br><span class="line">((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">&#125;</span><br><span class="line">if (isEagerInit) &#123;</span><br><span class="line">//如果希望急切的初始化，则通过beanName获取bean实例</span><br><span class="line">getBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">//如果beanName对应的bean不是FactoryBean，只是普通Bean，通过beanName获取bean实例</span><br><span class="line">getBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//遍历beanNames，触发所有SmartInitializingSingleton的后初始化回调</span><br><span class="line">for (String beanName : beanNames) &#123;</span><br><span class="line">Object singletonInstance = getSingleton(beanName);</span><br><span class="line">if (singletonInstance instanceof SmartInitializingSingleton) &#123;</span><br><span class="line">final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">if (System.getSecurityManager() != null) &#123;</span><br><span class="line">AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">return null;</span><br><span class="line">&#125;, getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">             getBean();点进去看源码</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object getBean(String name) throws BeansException &#123;</span><br><span class="line">    // 获取name对应的bean实例，如果不存在，则创建一个</span><br><span class="line">    return doGetBean(name, null, null, false);</span><br><span class="line">&#125;</span><br><span class="line">              doGetBean();点进去看源码</span><br><span class="line"></span><br><span class="line">protected &lt;T&gt; T doGetBean(final String name, @Nullable final Class&lt;T&gt; requiredType,</span><br><span class="line">@Nullable final Object[] args, boolean typeCheckOnly) throws BeansException &#123;</span><br><span class="line"> </span><br><span class="line">// 1.解析beanName，主要是解析别名、去掉FactoryBean的前缀“&amp;”</span><br><span class="line">final String beanName = transformedBeanName(name);</span><br><span class="line">Object bean;</span><br><span class="line">// 2.尝试从缓存中获取beanName对应的实例</span><br><span class="line">Object sharedInstance = getSingleton(beanName);</span><br><span class="line">// 3.如果beanName的实例存在于缓存中</span><br><span class="line">if (sharedInstance != null &amp;&amp; args == null) &#123;</span><br><span class="line">if (logger.isDebugEnabled()) &#123;</span><br><span class="line">if (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">logger.debug(&quot;Returning eagerly cached instance of singleton bean &#x27;&quot; + beanName +</span><br><span class="line">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">logger.debug(&quot;Returning cached instance of singleton bean &#x27;&quot; + beanName + &quot;&#x27;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 3.1 返回beanName对应的实例对象（主要用于FactoryBean的特殊处理，普通Bean会直接返回sharedInstance本身）</span><br><span class="line">bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">else &#123;</span><br><span class="line">// 4.scope为prototype的循环依赖校验：如果beanName已经正在创建Bean实例中，而此时我们又要再一次创建beanName的实例，则代表出现了循环依赖，需要抛出异常。</span><br><span class="line">if (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">throw new BeanCurrentlyInCreationException(beanName);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 5.获取parentBeanFactory</span><br><span class="line">BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">// 5.1 如果parentBeanFactory存在，并且beanName在当前BeanFactory不存在Bean定义，则尝试从parentBeanFactory中获取bean实例</span><br><span class="line">if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">// 5.2 将别名解析成真正的beanName</span><br><span class="line">String nameToLookup = originalBeanName(name);</span><br><span class="line">if (parentBeanFactory instanceof AbstractBeanFactory) &#123;</span><br><span class="line">return ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">&#125;</span><br><span class="line">// 5.3 尝试在parentBeanFactory中获取bean对象实例</span><br><span class="line">else if (args != null) &#123;</span><br><span class="line">// Delegation to parent with explicit args.</span><br><span class="line">return (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// No args -&gt; delegate to standard getBean method.</span><br><span class="line">return parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 6.如果不是仅仅做类型检测，而是创建bean实例，这里要将beanName放到alreadyCreated缓存</span><br><span class="line">if (!typeCheckOnly) &#123;</span><br><span class="line">markBeanAsCreated(beanName);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">try &#123;</span><br><span class="line">// 7.根据beanName重新获取MergedBeanDefinition（步骤6将MergedBeanDefinition删除了，这边获取一个新的）</span><br><span class="line">final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"> </span><br><span class="line">// 8.拿到当前bean依赖的bean名称集合，在实例化自己之前，需要先实例化自己依赖的bean</span><br><span class="line">String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">if (dependsOn != null) &#123;</span><br><span class="line">for (String dep : dependsOn) &#123;</span><br><span class="line">// 8.2 检查dep是否依赖于beanName，即检查是否存在循环依赖</span><br><span class="line">if (isDependent(beanName, dep)) &#123;</span><br><span class="line">throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">&quot;Circular depends-on relationship between &#x27;&quot; + beanName + &quot;&#x27; and &#x27;&quot; + dep + &quot;&#x27;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 8.4 将dep和beanName的依赖关系注册到缓存中</span><br><span class="line">registerDependentBean(dep, beanName);</span><br><span class="line">try &#123;</span><br><span class="line">// 8.5 获取dep对应的bean实例，如果dep还没有创建bean实例，则创建dep的bean实例</span><br><span class="line">getBean(dep);</span><br><span class="line">&#125;</span><br><span class="line">catch (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">&quot;&#x27;&quot; + beanName + &quot;&#x27; depends on missing bean &#x27;&quot; + dep + &quot;&#x27;&quot;, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 9.针对不同的scope进行bean的创建</span><br><span class="line">if (mbd.isSingleton()) &#123;</span><br><span class="line">sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 9.1.1 创建Bean实例</span><br><span class="line">return createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line">catch (BeansException ex) &#123;</span><br><span class="line">destroySingleton(beanName);</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">else if (mbd.isPrototype()) &#123;</span><br><span class="line">// 9.2 scope为prototype的bean创建</span><br><span class="line">Object prototypeInstance = null;</span><br><span class="line">try &#123;</span><br><span class="line">beforePrototypeCreation(beanName);</span><br><span class="line">prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">afterPrototypeCreation(beanName);</span><br><span class="line">&#125;</span><br><span class="line">bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line">// 10.返回创建出来的bean实例对象</span><br><span class="line">return (T) bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        getSingleton(beanName); 点进去看源码</span><br><span class="line"></span><br><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">// 1.从单例对象缓存中获取beanName对应的单例对象</span><br><span class="line">Object singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">// 2.如果单例对象缓存中没有，并且该beanName对应的单例bean正在创建中</span><br><span class="line">if (singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">// 3.加锁进行操作</span><br><span class="line">synchronized (this.singletonObjects) &#123;</span><br><span class="line">// 4.从早期单例对象缓存中获取单例对象（之所称成为早期单例对象，是因为</span><br><span class="line">earlySingletonObjects里</span><br><span class="line">// 的对象的都是通过提前曝光的ObjectFactory创建出来的，还未进行属性填充等操作）</span><br><span class="line">singletonObject = this.earlySingletonObjects.get(beanName);</span><br><span class="line">// 5.如果在早期单例对象缓存中也没有，并且允许创建早期单例对象引用</span><br><span class="line">if (singletonObject == null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">// 6.从单例工厂缓存中获取beanName的单例工厂</span><br><span class="line">ObjectFactory&lt;?&gt; singletonFactory = this.singletonFactories.get(beanName);</span><br><span class="line">if (singletonFactory != null) &#123;</span><br><span class="line">// 7.如果存在单例对象工厂，则通过工厂创建一个单例对象</span><br><span class="line">singletonObject = singletonFactory.getObject();</span><br><span class="line">// 8.将通过单例对象工厂创建的单例对象，放到早期单例对象缓存中</span><br><span class="line">this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">// 9.移除该beanName对应的单例对象工厂，因为该单例工厂已经创建了一个实</span><br><span class="line">例对象，并且放到earlySingletonObjects缓存了，</span><br><span class="line">// 因此，后续获取beanName的单例对象，可以通过earlySingletonObjects</span><br><span class="line">缓存拿到，不需要在用到该单例工厂</span><br><span class="line">this.singletonFactories.remove(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 10.返回单例对象</span><br><span class="line">return (singletonObject != NULL_OBJECT ? singletonObject : null);</span><br><span class="line">&#125;</span><br><span class="line">public boolean isSingletonCurrentlyInCreation(String beanName) &#123;</span><br><span class="line">return this.singletonsCurrentlyInCreation.contains(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        这段代码很重要，在正常情况下，该代码很普通，只是正常的检查下我们要拿的 bean 实例是否存在于缓存中，如果有就返回缓存中的 bean 实例，否则就返回 null。</span><br><span class="line">        这段代码之所以重要，是因为该段代码是 Spring 解决循环引用的核心代码。解决循环引用逻辑：使用构造函数创建一个 “不完整” 的 bean 实例（之所以说不完整，是因为此时该bean 实例还未初始化），并且提前曝光该 bean 实例的 ObjectFactory（提前曝光就是将</span><br><span class="line">ObjectFactory 放到 singletonFactories 缓存），通过 ObjectFactory 我们可以拿到该 bean 实例的引用，如果出现循环引用，我们可以通过缓存中的 ObjectFactory 来拿到 bean 实例，从而避免出现循环引用导致的死循环。这边通过缓存中的 ObjectFactory 拿到的 bean 实例虽然拿到的是 “不完整” 的bean 实例，但是由于是单例，所以后续初始化完成后，该 bean 实例的引用地址并不会变，所以最终我们看到的还是完整 bean 实例。</span><br><span class="line"></span><br><span class="line">另外这个代码块中引进了4个重要缓存：</span><br><span class="line">（1）singletonObjects 缓存：beanName -&gt; 单例 bean 对象。</span><br><span class="line">（2）earlySingletonObjects 缓存：beanName -&gt; 单例 bean 对象，该缓存存放的是早期单例 bean 对象，可以理解成还未进行属性填充、初始化。</span><br><span class="line">（3）singletonFactories 缓存：beanName -&gt; ObjectFactory。</span><br><span class="line">【singletonObjects、earlySingletonObjects、singletonFactories 在这边构成了一个类似于 “一、二、三级缓存” 的概念】</span><br><span class="line">（4）singletonsCurrentlyInCreation 缓存：当前正在创建单例 bean 对象的 beanName 集合。</span><br><span class="line"></span><br><span class="line">         createBean(beanName, mbd, args);点进去看源码</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException &#123;</span><br><span class="line">    ...</span><br><span class="line">try &#123;</span><br><span class="line">        //创建Bean实例（真正创建Bean的方法）</span><br><span class="line">Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">if (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(&quot;Finished creating instance of bean &#x27;&quot; + beanName + &quot;&#x27;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return beanInstance;</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">        doCreateBean(beanName, mbdToUse, args);点进去看源码</span><br><span class="line"></span><br><span class="line">protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)</span><br><span class="line">throws BeanCreationException &#123;</span><br><span class="line">......</span><br><span class="line">Object exposedObject = bean;</span><br><span class="line">try &#123;</span><br><span class="line">//对bean进行属性填充</span><br><span class="line">populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">//对bean进行初始化，方法中激活了Aware</span><br><span class="line">exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">//完成创建并返回</span><br><span class="line">return exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二.Spring的循环依赖<br>1.Spring解决循环依赖<br>        Spring的循环依赖的理论依据其实是基于Java的引用传递，当我们获取到对象的引用时，对象的field或属性是可以延后设置的(但是构造器必须是在获取引用之前)。</p><p>Spring为了解决单例的循环依赖问题，使用了三级缓存（三个map）。</p><p>（1）一级缓存singletonObjects：spring容器，用于存放完整的bean实例</p><p>private final Map&lt;String, Object&gt; singletonObjects &#x3D; new ConcurrentHashMap&lt;String, Object&gt;(256);<br>（2）二级缓存earlySingletonObjects：判断bean是否存在AOP，不存在AOP保存半成品的bean（属性暂未填充），存在AOP保存代理bean的beanProxy（目标bean还是半成品的）</p><p>private final Map&lt;String, Object&gt; earlySingletonObjects &#x3D; new HashMap&lt;String,Object&gt;(16);<br>（3）三级缓存singletonFactories：存放ObjectFactory，传入的是一个匿名内部类，如果bean被代理返回代理对象，如果bean未被代理返回原bean实例</p><p>private final Map&lt;String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>&gt;(16);<br>2.Spring解决循环依赖流程图</p><p>3.循环依赖的经典面试题<br>（1）【Spring 为何需要三级缓存解决循环依赖，而不是二级缓存？】</p><pre><code>    答：只要两个缓存确实可以做到解决循环依赖的问题，但是有一个前提这个bean没被AOP进行切面代理，如果这个bean被AOP进行了切面代理，那么只使用两个缓存是无法解决问题。</code></pre><p>（2）【三级缓存中为什么要添加 ObjectFactory 对象，而不是直接保存实例对象？】</p><pre><code>    答：假如想对添加到三级缓存中的实例对象进行增强，直接用实例对象是行不通的。</code></pre><p>（3）【构造器注入注入的循环依赖为什么无法解决？】</p><pre><code>    答：因为我们要先用构造函数创建一个 “不完整” 的 bean 实例，如果构造器出现循环依赖，我们连不完整的 bean 实例都构建不出来。</code></pre><p>三.AOP源码深度剖析<br>1.AOP的作用<br>        功能增强，比如日志管理、事务管理</p><p>2.Spring AOP底层实现机制<br>        Spring AOP 底层实现机制目前有两种：JDK 动态代理、CGLIB动态字节码生成。</p><p>（1）JDK 动态代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    IPerson target = new ManPerson();</span><br><span class="line">    IPerson proxy = (IPerson)Proxy.newProxyInstance(</span><br><span class="line">        target.getClass().getClassLoader(), </span><br><span class="line">        target.getClass().getInterfaces(), </span><br><span class="line">        new PersonInvocationHandler(target));</span><br><span class="line">    proxy.eat();</span><br><span class="line">    proxy.sleep();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 代理对象</span><br><span class="line">class PersonInvocationHandler implements InvocationHandler&#123;</span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    public PersonInvocationHandler(Object target)&#123;</span><br><span class="line">        this.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable&#123;</span><br><span class="line">        System.out.println(&quot;start&quot;);</span><br><span class="line">Object result = method.invoke(target, args);</span><br><span class="line">System.out.println(&quot;end&quot;);</span><br><span class="line"></span><br><span class="line">return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 目标对象</span><br><span class="line">class ManPerson implements IPerson&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">System.out.println(&quot;吃饭中......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sleep()&#123;</span><br><span class="line">System.out.println(&quot;睡觉中......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 目标对象接口</span><br><span class="line">interface IPerson&#123;</span><br><span class="line">    void eat();</span><br><span class="line"></span><br><span class="line">    void sleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）CGLIB 动态代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    Person proxy = (Person)Enhancer.create(Person.class, new PersonMethodInterceptor());</span><br><span class="line">    proxy.eat();</span><br><span class="line">    proxy.sleep();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 代理对象</span><br><span class="line">class PersonMethodInterceptor implements MethodInterceptor&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable&#123;</span><br><span class="line">        System.out.println(&quot;start&quot;);</span><br><span class="line">Object result = methodProxy.invokeSuper(o, objects);</span><br><span class="line">System.out.println(&quot;end&quot;);</span><br><span class="line"></span><br><span class="line">return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//目标对象</span><br><span class="line">public class Person&#123;</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">System.out.println(&quot;吃饭中......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void sleep()&#123;</span><br><span class="line">System.out.println(&quot;睡觉中......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）JDK 动态代理与CGLIB 动态代理的区别</p><pre><code>    &lt;1&gt;JDK动态代理是实现了被代理对象的接口，Cglib是继承了被代理对象。    &lt;2&gt;JDK调用代理方法，是通过反射机制调用，Cglib是通过FastClass机制直接调用方法，Cglib执行效率更高。</code></pre><p>3.Spring AOP使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//UserService接口</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    public void findAll();</span><br><span class="line">&#125;</span><br><span class="line">//UserService实现类</span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line">    public void findAll()&#123;</span><br><span class="line">        System.out.println(&quot;findAll...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//切面类</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class AopAspect &#123;</span><br><span class="line">    @Pointcut(&quot;execution(* com.itheima.service..*.*(..))&quot;)</span><br><span class="line">    public void pointcut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Before(&quot;pointcut()&quot;)</span><br><span class="line">    public void before() &#123;</span><br><span class="line">        System.out.println(&quot;before&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @After(&quot;pointcut()&quot;)</span><br><span class="line">    public void after() &#123;</span><br><span class="line">        System.out.println(&quot;after advice&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Around(&quot;pointcut()&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint proceedingJoinPoint) throws InterruptedException &#123;</span><br><span class="line">        System.out.println(&quot;around advice start&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Object result = proceedingJoinPoint.proceed();</span><br><span class="line">            System.out.println(&quot;result: &quot; + result);</span><br><span class="line">            System.out.println(&quot;around advice end&quot;);</span><br><span class="line">            return result;</span><br><span class="line">        &#125; catch (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一.IOC源码深度剖析&lt;br&gt;1.一般第一步都是加载xml文件，创建一个ApplicationContext容器&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="java" scheme="https://xxxgod.github.io/categories/java/"/>
    
    
    <category term="spring" scheme="https://xxxgod.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Springboot启动流程</title>
    <link href="https://xxxgod.github.io/2019/03/20/Springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://xxxgod.github.io/2019/03/20/Springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2019-03-20T08:41:14.000Z</published>
    <updated>2025-04-21T08:45:40.105Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 启动流程主要包含一系列初始化、配置加载和上下文创建等操作，以下为你详细介绍各个阶段：</p><h3 id="1-启动入口"><a href="#1-启动入口" class="headerlink" title="1. 启动入口"></a>1. 启动入口</h3><p>Spring Boot 应用启动的入口是 <code>SpringApplication.run</code> 方法，一般在 <code>main</code> 方法中调用，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建-SpringApplication-实例"><a href="#2-创建-SpringApplication-实例" class="headerlink" title="2. 创建 SpringApplication 实例"></a>2. 创建 <code>SpringApplication</code> 实例</h3><p><code>SpringApplication.run</code> 方法内部会创建 <code>SpringApplication</code> 实例，并进行一些初始化操作：</p><ul><li><strong>推断应用类型</strong>：判定应用属于哪种类型，如 Web 应用（包含 Servlet Web 应用、Reactive Web 应用）或者非 Web 应用。</li><li><strong>加载初始化器和监听器</strong>：从 <code>META - INF/spring.factories</code> 文件里加载 <code>ApplicationContextInitializer</code> 和 <code>ApplicationListener</code> 实例。</li></ul><h3 id="3-执行-SpringApplication-run-方法"><a href="#3-执行-SpringApplication-run-方法" class="headerlink" title="3. 执行 SpringApplication.run 方法"></a>3. 执行 <code>SpringApplication.run</code> 方法</h3><p>此方法是启动流程的核心，包含以下关键步骤：</p><ul><li><p><strong>记录启动时间</strong>：利用 <code>StopWatch</code> 记录启动耗时。</p></li><li><p><strong>触发启动事件</strong>：借助 <code>SpringApplicationRunListeners</code> 触发 <code>starting</code> 事件，通知所有监听器应用开始启动。</p></li><li><p><strong>准备应用环境</strong>：创建并配置 <code>ConfigurableEnvironment</code>，加载配置文件、系统属性等。</p></li><li><p><strong>打印启动横幅</strong>：显示自定义或者默认的启动横幅。</p></li><li><p><strong>创建应用上下文</strong>：依据之前推断的应用类型，创建对应的 <code>ConfigurableApplicationContext</code> 实例。</p></li><li><p><strong>准备应用上下文</strong>：设置环境、注册监听器、加载主配置源等。</p></li><li><p>刷新应用上下文</p><p>：这是关键步骤，会触发 Spring 的自动配置机制，具体如下：</p><ul><li><strong>加载自动配置类</strong>：从 <code>META - INF/spring.factories</code> 文件中读取候选自动配置类。</li><li><strong>排除不需要的配置类</strong>：依据 <code>@EnableAutoConfiguration</code> 注解的 <code>exclude</code> 和 <code>excludeName</code> 属性，排除不需要的自动配置类。</li><li><strong>条件过滤</strong>：对候选配置类进行条件过滤，只有满足 <code>@Conditional</code> 注解条件的配置类才会被加载。</li><li><strong>加载配置类到容器</strong>：将经过过滤后的自动配置类加载到 Spring 容器中。</li></ul></li><li><p><strong>触发启动完成事件</strong>：触发 <code>started</code> 事件，通知监听器应用已启动。</p></li><li><p><strong>调用运行器</strong>：调用 <code>CommandLineRunner</code> 和 <code>ApplicationRunner</code> 实例，执行一些启动后的自定义逻辑。</p></li><li><p><strong>触发运行中事件</strong>：触发 <code>running</code> 事件，表明应用已成功启动并正在运行。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Spring Boot 启动流程从 <code>SpringApplication.run</code> 方法开始，经过创建 <code>SpringApplication</code> 实例、执行一系列初始化和配置操作，最终完成应用上下文的创建和自动配置类的加载，使应用成功启动并运行。整个流程高度自动化，通过约定大于配置的原则，减少了开发者的配置工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring Boot 启动流程主要包含一系列初始化、配置加载和上下文创建等操作，以下为你详细介绍各个阶段：&lt;/p&gt;
&lt;h3 id=&quot;1-启动入口&quot;&gt;&lt;a href=&quot;#1-启动入口&quot; class=&quot;headerlink&quot; title=&quot;1. 启动入口&quot;&gt;&lt;/a&gt;1. 启动</summary>
      
    
    
    
    
    <category term="springboot" scheme="https://xxxgod.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean的生命周期</title>
    <link href="https://xxxgod.github.io/2018/03/01/Spring-Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://xxxgod.github.io/2018/03/01/Spring-Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2018-03-01T04:01:28.000Z</published>
    <updated>2025-04-21T09:04:01.404Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Bean 的生命周期包含了从创建到销毁的整个过程，主要包括实例化、属性赋值、初始化和销毁等阶段。下面将结合源码对其生命周期进行详细解析。</p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="1-实例化-Bean"><a href="#1-实例化-Bean" class="headerlink" title="1. 实例化 Bean"></a>1. 实例化 Bean</h4><p>在 <code>AbstractAutowireCapableBeanFactory</code> 类的 <code>createBeanInstance</code> 方法中完成 Bean 的实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> BeanWrapper <span class="title function_">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 解析 Bean 的类</span></span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (beanClass != <span class="literal">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class="line">                <span class="string">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用构造函数解析器来实例化 Bean</span></span><br><span class="line">    Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">    <span class="keyword">if</span> (instanceSupplier != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试使用默认构造函数实例化</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">resolved</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">autowireNecessary</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">                resolved = <span class="literal">true</span>;</span><br><span class="line">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">        <span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">            <span class="keyword">return</span> autowireConstructor(beanName, mbd, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动装配构造函数</span></span><br><span class="line">    Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">    <span class="keyword">if</span> (ctors != <span class="literal">null</span> || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">            mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) &#123;</span><br><span class="line">        <span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用默认构造函数</span></span><br><span class="line">    <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-属性赋值"><a href="#2-属性赋值" class="headerlink" title="2. 属性赋值"></a>2. 属性赋值</h4><p>在 <code>populateBean</code> 方法中进行 Bean 的属性赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> BeanWrapper bw)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bw == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, <span class="string">&quot;Cannot apply property values to null instance&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Skip property population phase for null instance.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span></span><br><span class="line">    <span class="comment">// state of the bean before properties are set. This can be used, for example,</span></span><br><span class="line">    <span class="comment">// to support styles of field injection.</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">continueWithPropertyPopulation</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                    continueWithPropertyPopulation = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">PropertyValues</span> <span class="variable">pvs</span> <span class="operator">=</span> (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        <span class="type">MutablePropertyValues</span> <span class="variable">newPvs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>(pvs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line">        <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line">        <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pvs = newPvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasInstAwareBpps()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">pvsToUse</span> <span class="operator">=</span> ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span><br><span class="line">                <span class="keyword">if</span> (pvsToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.defaultMergeable == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Cannot determine default mergeable settings for &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; - &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;inconsistent values in beans of the same type&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    pvsToUse = (pvs <span class="keyword">instanceof</span> MutablePropertyValues ?</span><br><span class="line">                            ((MutablePropertyValues) pvs).mergeIfRequired(<span class="built_in">this</span>.defaultMergeable) : pvs);</span><br><span class="line">                &#125;</span><br><span class="line">                pvs = pvsToUse;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pvs != <span class="literal">null</span>) &#123;</span><br><span class="line">        applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-初始化-Bean"><a href="#3-初始化-Bean" class="headerlink" title="3. 初始化 Bean"></a>3. 初始化 Bean</h4><p>在 <code>initializeBean</code> 方法中进行 Bean 的初始化操作，包括调用 <code>BeanNameAware</code>、<code>BeanFactoryAware</code> 等接口的方法，以及执行自定义的初始化方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            invokeAwareMethods(beanName, bean);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        invokeAwareMethods(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> bean;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">                (mbd != <span class="literal">null</span> ? mbd.getResourceDescription() : <span class="literal">null</span>),</span><br><span class="line">                beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-销毁-Bean"><a href="#4-销毁-Bean" class="headerlink" title="4. 销毁 Bean"></a>4. 销毁 Bean</h4><p>在 <code>AbstractBeanFactory</code> 类的 <code>destroyBean</code> 方法中进行 Bean 的销毁操作，包括调用 <code>DisposableBean</code> 接口的 <code>destroy</code> 方法和自定义的销毁方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyBean</span><span class="params">(String beanName, <span class="meta">@Nullable</span> Object beanInstance)</span> &#123;</span><br><span class="line">    <span class="comment">// Trigger destruction of dependent beans first...</span></span><br><span class="line">    Set&lt;String&gt; dependencies = <span class="built_in">this</span>.dependentBeanMap.remove(beanName);</span><br><span class="line">    <span class="keyword">if</span> (dependencies != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;Retrieved dependent beans for bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;: &quot;</span> + dependencies);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String dependentBeanName : dependencies) &#123;</span><br><span class="line">            destroySingleton(dependentBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Actually destroy the bean now...</span></span><br><span class="line">    <span class="keyword">if</span> (beanInstance != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasDestructionAwareBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (DestructionAwareBeanPostProcessor processor : getDestructionAwareBeanPostProcessors()) &#123;</span><br><span class="line">                processor.postProcessBeforeDestruction(beanInstance, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Actually invoke the destroy method if necessary...</span></span><br><span class="line">        <span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> DisposableBean) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ((DisposableBean) beanInstance).destroy();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Invocation of destroy method failed on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">            removeSingleton(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove destroyed bean from other beans&#x27; dependencies.</span></span><br><span class="line">    <span class="built_in">this</span>.dependentBeanMap.values().removeIf(dependencies -&gt; dependencies.remove(beanName));</span><br><span class="line">    <span class="built_in">this</span>.dependenciesForBeanMap.remove(beanName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove corresponding manual singleton registration.</span></span><br><span class="line">    <span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">        removeSingleton(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Spring Bean 的生命周期主要包括以下几个阶段：</p><ol><li><p><strong>实例化</strong>：通过构造函数或工厂方法创建 Bean 的实例。</p></li><li><p><strong>属性赋值</strong>：为 Bean 的属性注入依赖。</p></li><li><p>初始化</p><p>：</p><ul><li>调用 <code>Aware</code> 接口的方法，如 <code>BeanNameAware</code>、<code>BeanFactoryAware</code> 等。</li><li>调用 <code>BeanPostProcessor</code> 的 <code>postProcessBeforeInitialization</code> 方法。</li><li>调用自定义的初始化方法，如 <code>@PostConstruct</code> 注解的方法或 <code>init-method</code> 属性指定的方法。</li><li>调用 <code>BeanPostProcessor</code> 的 <code>postProcessAfterInitialization</code> 方法。</li></ul></li><li><p><strong>使用</strong>：Bean 可以被应用程序使用。</p></li><li><p>销毁</p><p>：</p><ul><li>调用 <code>DestructionAwareBeanPostProcessor</code> 的 <code>postProcessBeforeDestruction</code> 方法。</li><li>调用 <code>DisposableBean</code> 接口的 <code>destroy</code> 方法或自定义的销毁方法，如 <code>@PreDestroy</code> 注解的方法或 <code>destroy-method</code> 属性指定的方法。</li></ul></li></ol><p>通过这些阶段，Spring 框架确保了 Bean 的正确创建、初始化和销毁，同时提供了丰富的扩展点，允许开发者在不同阶段进行自定义操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring Bean 的生命周期包含了从创建到销毁的整个过程，主要包括实例化、属性赋值、初始化和销毁等阶段。下面将结合源码对其生命周期进行详细解析。&lt;/p&gt;
&lt;h3 id=&quot;源码解析&quot;&gt;&lt;a href=&quot;#源码解析&quot; class=&quot;headerlink&quot; title=&quot;源</summary>
      
    
    
    
    
    <category term="spring" scheme="https://xxxgod.github.io/tags/spring/"/>
    
  </entry>
  
</feed>
